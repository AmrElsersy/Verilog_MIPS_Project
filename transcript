# //  ModelSim PE Student Edition 10.4a Apr  7 2015 
# //
# //  Copyright 1991-2015 Mentor Graphics Corporation
# //  All Rights Reserved.
# //
# //  THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY INFORMATION
# //  WHICH IS THE PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS
# //  LICENSORS AND IS SUBJECT TO LICENSE TERMS.
# //  THIS DOCUMENT CONTAINS TRADE SECRETS AND COMMERCIAL OR FINANCIAL
# //  INFORMATION THAT ARE PRIVILEGED, CONFIDENTIAL, AND EXEMPT FROM
# //  DISCLOSURE UNDER THE FREEDOM OF INFORMATION ACT, 5 U.S.C. SECTION 552.
# //  FURTHERMORE, THIS INFORMATION IS PROHIBITED FROM DISCLOSURE UNDER
# //  THE TRADE SECRETS ACT, 18 U.S.C. SECTION 1905.
# //
# // NOT FOR CORPORATE OR PRODUCTION USE.
# // THE ModelSim PE Student Edition IS NOT A SUPPORTED PRODUCT.
# // FOR HIGHER EDUCATION PURPOSES ONLY
# //
# vsim -c -do "run -all" work.MIPS 
# Start time: 00:12:26 on Oct 26,2019
# Loading work.MIPS
# Loading work.CLOCK
# Loading work.PC
# Loading work.PC_ADDER
# Loading work.INS_MEMORY
# Loading work.Reg_Dst_MUX
# Loading work.REG_FILE
# Loading work.CONTROL
# Loading work.SIGN_EXTEND
# Loading work.ALU_CONTROL
# Loading work.ALU
# Loading work.MUX_32_1
# Loading work.DATA_MEMORY
# Loading work.MUX_32_2
# Loading work.BR_ADDER
# Loading work.JUMP_ADDRESS
# run -all
# SIZE ===           8 
# ERROR_NOT_RAY22 ALUctrl: xxxx
# ERROR_NOT_RAY22 ALUctrl: xxxx
# ***************** 0 *******************
#  pcOut=00000000, pcIn:00000001, instruction: 2210000b 
#  Read_Data_1:00000000, Read_Data_2:00000000, instruction[25:21]:10, instruction[20:16]:10 
#  beq_and_output:0, Branch:0, branch_or_output:0, pc_branch_mux_output:00000001
#  Read_Data_1:00000000, alu_src_mux_Output:0000000b, ALU_Src: 1, Zero:0, Alu_Result: 0000000b
#  ***************************************
# ***************** 1 *******************
#  pcOut=00000001, pcIn:00000002, instruction: 2210000b 
#  Read_Data_1:00000000, Read_Data_2:00000000, instruction[25:21]:10, instruction[20:16]:10 
#  beq_and_output:0, Branch:0, branch_or_output:0, pc_branch_mux_output:00000002
#  Read_Data_1:00000000, alu_src_mux_Output:0000000b, ALU_Src: 1, Zero:0, Alu_Result: 0000000b
#  ***************************************
# ***************** 0 *******************
#  pcOut=00000001, pcIn:00000002, instruction: 2231000c 
#  Read_Data_1:00000000, Read_Data_2:00000000, instruction[25:21]:11, instruction[20:16]:11 
#  beq_and_output:0, Branch:0, branch_or_output:0, pc_branch_mux_output:00000002
#  Read_Data_1:00000000, alu_src_mux_Output:0000000c, ALU_Src: 1, Zero:0, Alu_Result: 0000000c
#  ***************************************
# ***************** 1 *******************
#  pcOut=00000002, pcIn:00000003, instruction: 2231000c 
#  Read_Data_1:00000000, Read_Data_2:00000000, instruction[25:21]:11, instruction[20:16]:11 
#  beq_and_output:0, Branch:0, branch_or_output:0, pc_branch_mux_output:00000003
#  Read_Data_1:00000000, alu_src_mux_Output:0000000c, ALU_Src: 1, Zero:0, Alu_Result: 0000000c
#  ***************************************
# ***************** 0 *******************
#  pcOut=00000002, pcIn:00000003, instruction: 2232000d 
#  Read_Data_1:0000000c, Read_Data_2:00000000, instruction[25:21]:11, instruction[20:16]:12 
#  beq_and_output:0, Branch:0, branch_or_output:0, pc_branch_mux_output:00000003
#  Read_Data_1:0000000c, alu_src_mux_Output:0000000d, ALU_Src: 1, Zero:0, Alu_Result: 00000019
#  ***************************************
# ***************** 1 *******************
#  pcOut=00000003, pcIn:00000004, instruction: 2232000d 
#  Read_Data_1:0000000c, Read_Data_2:00000000, instruction[25:21]:11, instruction[20:16]:12 
#  beq_and_output:0, Branch:0, branch_or_output:0, pc_branch_mux_output:00000004
#  Read_Data_1:0000000c, alu_src_mux_Output:0000000d, ALU_Src: 1, Zero:0, Alu_Result: 00000019
#  ***************************************
# ***************** 0 *******************
#  pcOut=00000003, pcIn:00000004, instruction: 2273000e 
#  Read_Data_1:00000000, Read_Data_2:00000000, instruction[25:21]:13, instruction[20:16]:13 
#  beq_and_output:0, Branch:0, branch_or_output:0, pc_branch_mux_output:00000004
#  Read_Data_1:00000000, alu_src_mux_Output:0000000e, ALU_Src: 1, Zero:0, Alu_Result: 0000000e
#  ***************************************
# ***************** 1 *******************
#  pcOut=00000004, pcIn:00000005, instruction: 2273000e 
#  Read_Data_1:00000000, Read_Data_2:00000000, instruction[25:21]:13, instruction[20:16]:13 
#  beq_and_output:0, Branch:0, branch_or_output:0, pc_branch_mux_output:00000005
#  Read_Data_1:00000000, alu_src_mux_Output:0000000e, ALU_Src: 1, Zero:0, Alu_Result: 0000000e
#  ***************************************
# ***************** 0 *******************
#  pcOut=00000004, pcIn:00000005, instruction: ad100000 
#  Read_Data_1:00000000, Read_Data_2:0000000b, instruction[25:21]:08, instruction[20:16]:10 
#  beq_and_output:0, Branch:0, branch_or_output:0, pc_branch_mux_output:00000005
#  Read_Data_1:00000000, alu_src_mux_Output:00000000, ALU_Src: 1, Zero:1, Alu_Result: 00000000
#  ***************************************
# ***************** 1 *******************
#  pcOut=00000005, pcIn:00000006, instruction: ad100000 
#  Read_Data_1:00000000, Read_Data_2:0000000b, instruction[25:21]:08, instruction[20:16]:10 
#  beq_and_output:0, Branch:0, branch_or_output:0, pc_branch_mux_output:00000006
#  Read_Data_1:00000000, alu_src_mux_Output:00000000, ALU_Src: 1, Zero:1, Alu_Result: 00000000
#  ***************************************
# ***************** 0 *******************
#  pcOut=00000005, pcIn:00000006, instruction: ad110001 
#  Read_Data_1:00000000, Read_Data_2:0000000c, instruction[25:21]:08, instruction[20:16]:11 
#  beq_and_output:0, Branch:0, branch_or_output:0, pc_branch_mux_output:00000006
#  Read_Data_1:00000000, alu_src_mux_Output:00000001, ALU_Src: 1, Zero:0, Alu_Result: 00000001
#  ***************************************
# ***************** 1 *******************
#  pcOut=00000006, pcIn:00000007, instruction: ad110001 
#  Read_Data_1:00000000, Read_Data_2:0000000c, instruction[25:21]:08, instruction[20:16]:11 
#  beq_and_output:0, Branch:0, branch_or_output:0, pc_branch_mux_output:00000007
#  Read_Data_1:00000000, alu_src_mux_Output:00000001, ALU_Src: 1, Zero:0, Alu_Result: 00000001
#  ***************************************
# ***************** 0 *******************
#  pcOut=00000006, pcIn:00000007, instruction: ad120002 
#  Read_Data_1:00000000, Read_Data_2:00000019, instruction[25:21]:08, instruction[20:16]:12 
#  beq_and_output:0, Branch:0, branch_or_output:0, pc_branch_mux_output:00000007
#  Read_Data_1:00000000, alu_src_mux_Output:00000002, ALU_Src: 1, Zero:0, Alu_Result: 00000002
#  ***************************************
# ***************** 1 *******************
#  pcOut=00000007, pcIn:00000008, instruction: ad120002 
#  Read_Data_1:00000000, Read_Data_2:00000019, instruction[25:21]:08, instruction[20:16]:12 
#  beq_and_output:0, Branch:0, branch_or_output:0, pc_branch_mux_output:00000008
#  Read_Data_1:00000000, alu_src_mux_Output:00000002, ALU_Src: 1, Zero:0, Alu_Result: 00000002
#  ***************************************
# ***************** 0 *******************
#  pcOut=00000007, pcIn:00000008, instruction: xxxxxxxx 
#  Read_Data_1:xxxxxxxx, Read_Data_2:xxxxxxxx, instruction[25:21]:xx, instruction[20:16]:xx 
#  beq_and_output:0, Branch:0, branch_or_output:0, pc_branch_mux_output:00000008
#  Read_Data_1:xxxxxxxx, alu_src_mux_Output:xxxxxxxx, ALU_Src: 0, Zero:x, Alu_Result: xxxxxxxx
#  ***************************************
# ***************** 1 *******************
#  pcOut=00000008, pcIn:00000009, instruction: xxxxxxxx 
#  Read_Data_1:xxxxxxxx, Read_Data_2:xxxxxxxx, instruction[25:21]:xx, instruction[20:16]:xx 
#  beq_and_output:0, Branch:0, branch_or_output:0, pc_branch_mux_output:00000009
#  Read_Data_1:xxxxxxxx, alu_src_mux_Output:xxxxxxxx, ALU_Src: 0, Zero:x, Alu_Result: xxxxxxxx
#  ***************************************
# ***************** 0 *******************
#  pcOut=00000008, pcIn:00000009, instruction: xxxxxxxx 
#  Read_Data_1:xxxxxxxx, Read_Data_2:xxxxxxxx, instruction[25:21]:xx, instruction[20:16]:xx 
#  beq_and_output:0, Branch:0, branch_or_output:0, pc_branch_mux_output:00000009
#  Read_Data_1:xxxxxxxx, alu_src_mux_Output:xxxxxxxx, ALU_Src: 0, Zero:x, Alu_Result: xxxxxxxx
#  ***************************************
# end_program will save the memory data and exit the verilog program 
# END from regFile ya RAY2
# END from data memory ya RAY2
# ** Note: $stop    : data_memory.v(20)
#    Time: 527 ns  Iteration: 2  Instance: /MIPS/data_memory
# Break in Module DATA_MEMORY at data_memory.v line 20
# Stopped at data_memory.v line 20
